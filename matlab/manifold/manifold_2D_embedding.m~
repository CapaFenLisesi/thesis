

% select the distance
d_Euc = @(x,y) norm(x-y);

%distance = @div_KL
%distance = d_Euc
distance = @(p,q) div_MMD(p,q,0.1);
% initialise the matrix
n1 = 10;
n2 = 10;
min_theta1 = 0;
max_theta1 = 1;
theta1 = linspace(min_theta1,max_theta1,n1);
min_theta2 = 0.2;
max_theta2 = 1;
theta2 = linspace(min_theta2,max_theta2,n2);

theta = [reshape(repmat(theta1,[n2,1]),[n1*n2,1]),repmat(theta2',[n1,1])];

D = Inf(n1*n2);
parallel_edges = false(n1*n2);

% drawing edges between neighbouring theta1 values but same theta2 values
for i=1:n1-1
    for j=1:n2
        index1 = (i-1)*n2 + j;
        index2 = i*n2 + j;
        D(index1,index2) = (distance(theta(index1,:),theta(index2,:)) + distance(theta(index2,:),theta(index1,:)))/2;
        parallel_edges(index1,index2) = true;
    end
end

%drawing edges between neighbouring theta1 values but same theta2 values
for i=1:n1
    for j=1:n2-1
        index1 = (i-1)*n2 + j;
        index2 = (i-1)*n2 + j + 1;
        D(index1,index2) = (distance(theta(index1,:),theta(index2,:)) + distance(theta(index2,:),theta(index1,:)))/2;
        parallel_edges(index1,index2) = true;
    end
end

use_diagonal_edges = true;
if use_diagonal_edges
    diagonal_edges = false(n1*n2);
    % drawing diagonal edges of one kind
    for i=1:n1-1
        for j=1:n2-1
            index1 = (i-1)*n2 + j;
            index2 = i*n2 + j + 1;
            D(index1,index2) = (distance(theta(index1,:),theta(index2,:)) + distance(theta(index2,:),theta(index1,:)))/2;
            diagonal_edges(index1,index2) = true;
        end
    end

    % drawing diagonal edges of the other kind
    for i=1:n1-1
        for j=1:n2-1
            index1 = (i-1)*n2 + j + 1;
            index2 = i*n2 + j;
            D(index1,index2) = (distance(theta(index1,:),theta(index2,:)) + distance(theta(index2,:),theta(index1,:)))/2;
            diagonal_edges(index1,index2) = true;
        end
    end
end


D = min(D,D');
% setting diagonals to zero
for i=1:n1*n2
    D(i,i)=0;
end

if use_diagonal_edges
    disp(['number of existing edges: ',int2str(sum(sum(D<Inf))),'. There should be ' int2str(n1*n2 + 2*(n1*(n2-1) + (n1-1)*n2) + 4*(n1-1)*(n2-1)) , '.'])
else
    disp(['number of existing edges: ',int2str(sum(sum(D<Inf))),'. There should be ' int2str(n1*n2 + 2*(n1*(n2-1) + (n1-1)*n2)) , '.'])
end



% plot graph for checking
check_graph = false;
if check_graph
    figure(2)
    clf
    xlim([-.1,1.1])
    ylim([-.1,1.1])
    hold on
    [row,col] = find(D<Inf & triu(D)>0);
    for i=1:size(r,1)
        i1 = row(i);
        i2 = col(i);
        plot([theta(i1,1),theta(i2,1)],[theta(i1,2),theta(i2,2)],'Color',rand(1,3))
    end
end

% shortest path algorithm to find approximate geodesics

N = n1*n2;

P = D;

for k=1:N
    for i = 1:N
        for j = 1:N
            P(i,j) = min(P(i,j),P(i,k)+P(k,j));
        end
    end
end

X = mdscale(P,2);

figure(1)
clf
plot(X(:,1),X(:,2),'k.')
hold on
axis equal

[row,col] = find(parallel_edges);
for i=1:size(row,1)
    i1 = row(i);
    i2 = col(i);
    plot([X(i1,1),X(i2,1)],[X(i1,2),X(i2,2)],'k:');
end